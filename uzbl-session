#! /bin/bash

function usage {
    echo "Usage: uzbl-session COMMAND [NAME]
Control the current uzbl session.

  The commands are:
  save              Save the session to the current session file (or create a new one)
  delete            Delete a session file
  restore           Restore a session from a session file
  kill              Terminate the current session

  -k, --kill        Terminate the current session (as part of save)
  -d, --delete      Delete a session (e.g., after restoring)
  -v, --verbose     Enable verbose output
  -h, --help        display this help and exit"
}

session_browser="uzbl-browser -u"

uzbl_dir=${XDG_DATA_HOME:-$HOME/.local/share}/uzbl
script_dir=$uzbl_dir/scripts/session-manager
mkdir -p $script_dir 2> /dev/null
[[ $? != "0" ]] && { echo "No data directory" >&2; exit 1; }
session_file=$uzbl_dir/session.txt
session_dir=$uzbl_dir/sessions/
unset uzbl_dir

# If session file isn't a symlink, back it up
if [ -f $session_file ] && [ ! -h $session_file ]; then
    mv $session_file \
        $session_dir/uzbl_session_$(\
        date --date "@$(stat -c %Y $session_file)" +%Y-%m-%d-%H:%M)
    if [ $? != 0 ]; then
        echo "Error: current session file could be lost" >&2
        exit 1
    fi
fi

function set_session {
    case $1 in
        ''|'--')
            echo "No session chosen; choosing current" >&2
            return 1
            ;;
        new)
            touch $session_dir/uzbl_session_$(date +%Y-%m-%d-%H:%M)
            [[ -e $session_file ]] && unlink $session_file
            ln -s $session_dir/uzbl_session_$(date +%Y-%m-%d-%H:%M) \
                $session_file >&2
            return 0
            ;;
        current)
            return 0
            ;;
        *)
            touch $session_dir/$1
            [[ -e $session_file ]] && unlink $session_file
            ln -s $session_dir/$1 $session_file >&2
            return 0
            ;;
    esac
}

function find_uzbl_instances {
    pgrep uzbl-core
}

KILL=0
VERBOSE=0
ACTION=$1 ; shift 1

TEMP=$( getopt -o s:wvh -l session:,kill,verbose,help -n 'uzbl-session' -- "$@" )
eval set -- "$TEMP"
while true ; do
    case $1 in
        -s|--session)
            session=$2
            [[ ! -z $2 && ! $2 = "--" ]] && shift 1
            shift 1
            ;;
        -w|--kill)
            if [ "$ACTION" != save ]; then
                echo "Invalid flag for action $ACTION" >&2
                exit 1
            fi
            KILL=1; shift 1 ;;
        -d|--delete)
            if [ "$ACTION" != restore ]; then
                echo "Invalid flag for action $ACTION" >&2
                exit 1
            fi
            DELETE=1; shift 1 ;;
        -v|--verbose)
            VERBOSE=1; shift 1 ;;
        --) shift 1 ; break ;;
        *) echo "Invalid argument: $1" ; usage ; exit 1 ;;
    esac
done

function _echo {
    [[ $VERBOSE -eq 0 ]] && return 0
    echo $@
}

if [ "$ACTION" = save ]; then
    _echo "Saving session $session"
    set_session $session

    echo "" > $session_file
    for pid in $(find_uzbl_instances); do
        # TODO: change to $uzbl_fifo_dir
        echo "sh 'echo \$UZBL_URI >> $session_file'" \
            > /tmp/uzbl_fifo_$pid
    done
    [[ $KILL -eq 1 ]] && ACTION=kill
fi

if [ "$ACTION" = kill ]; then
    _echo "Signalling all uzbl instances to terminate"

    for pid in $(find_uzbl_instances); do
        echo "exit" > /tmp/uzbl_fifo_$pid
        while kill -0 $pid 2>/dev/null; do sleep 0; done
    done

    # killall uzbl-event-manager
    rm $session_file
fi

if [ "$ACTION" = restore ]; then
    _echo "Restoring session $session"
    set_session $session

    while read url; do
        [[ -z $url ]] || $session_browser $url &
    done < $session_file
    [[ $DELETE -eq 1 ]] && ACTION=delete
fi

if [ "$ACTION" = delete ]; then
    _echo "Deleting session $session"
fi
