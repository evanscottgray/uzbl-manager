#! /bin/bash

function usage {
    echo "Usage: uzbl-session-manager [OPTIONS]
Service to manage uzbl session

Startup options:
  -v, --verbose     Enable verbose output
  -h, --help        display this help and exit"
}

XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}

SESSION_DIR=$XDG_DATA_HOME/uzbl/sessions
READ_FIFO=/tmp/uzbl_session_fifo
EVENT_SOCK=$XDG_CACHE_HOME/uzbl/event_daemon
BROWSER="uzbl-browser"
CURRENT_SESSION=""
CURRENT_SESSION_FILE=$XDG_DATA_HOME/uzbl/.session

function find_uzbl_instances {
    pgrep uzbl-core
    return $?
}

function update_current_session {
    CURRENT_SESSION=$1
    echo $1 > $CURRENT_SESSION_FILE
}


VERBOSE=0
TEMP=$( getopt -o vh -l verbose,help -n 'uzbl-session-manager' -- "$@" )
eval set -- "$TEMP"
while true ; do
    case $1 in
        -v|--verbose)
            VERBOSE=1; shift 1 ;;
        --) shift 1 ; break ;;
        *) echo "Invalid argument: $1" ; usage ; exit 1 ;;
    esac
done

# Perform initlialization
if [[ ! -p $READ_FIFO ]]; then
    rm -f $READ_FIFO
    mkfifo $READ_FIFO
fi

[[ $VERBOSE -eq 1 ]] && verbosity=--verbose
uzbl-event-manager --no-daemon $verbosity \
    --quiet-events --server-socket=$EVENT_SOCK start & disown

# Prepare exit handler
function on_exit {
    if find_uzbl_instances > /dev/null; then
        session_save > /dev/null
        session_kill > /dev/null
    else
        _echo "No instances; not saving session"
    fi
    # Kill the event manager if it's still running
    [[ -f $EVENT_SOCK.pid ]] && kill $(cat $EVENT_SOCK.pid)
    # Signal that the daemon has exited
    rm -f $READ_FIFO
    _echo "Exiting..."
    exit 0
}
trap on_exit EXIT

function _echo {
    [[ $VERBOSE -eq 0 ]] && return 0
    echo $@
}

function _error {
    echo $@ >&2
}

function get_session {
    session=$CURRENT_SESSION
    case $1 in
        ''|'--')    _error "No session chosen; choosing current" ;;
        current)    ;;
        new)        session="" ;;
        *)          session=$1 ;;
    esac
    [[ -z $session ]] && session=uzbl_session_$(date +%Y-%m-%d-%H:%M)
    echo $session
}

function session_spawn {
    $BROWSER $@ >/dev/null 2>&1 & disown
}

function session_save {
    session=$( get_session $1 )

    rm $SESSION_DIR/$session > /dev/null 2>&1

    if pids=$(find_uzbl_instances); then
        touch $SESSION_DIR/$session
        echo "$pids" | while read pid; do
            # TODO: change to $uzbl_fifo_dir
            echo "sync_sh 'echo \$UZBL_URI >> $SESSION_DIR/$session'" \
                > /tmp/uzbl_fifo_"$pid"
        done
    else
        session=""
    fi

    echo $session
}

function session_restore {
    session=$( get_session $1 )
    if [ ! -f $SESSION_DIR/$session ]; then
        _error "No such session $session"
    else
        while read url; do
            [[ -z $url ]] || session_spawn -u $url
        done < $SESSION_DIR/$session
    fi

    echo $session
}

function session_delete {
    session=$( get_session $1 )
    rm $SESSION_DIR/$session || \
        _error "Could not remove session $session"
    [[ $1 = $2 ]] && echo $2 || echo $1
}

function session_kill {
    for pid in $(find_uzbl_instances); do
        echo "exit" > /tmp/uzbl_fifo_$pid
        for count in {1..10000}; do
            kill -0 $pid 2>/dev/null || break
        done
        [[ $count -eq 10000 ]] && kill -SIGTERM $pid
    done
}

while true; do
    ACTION=""; SESSION=""
    while read cmd; do
        ACTION=$(echo $cmd | awk '{print $1}')
        SESSION=$(echo $cmd | awk '{print $2}')
        [[ -z $ACTION ]] && ACTION=invalid
        case $ACTION in
            spawn) session_spawn ;;
            save)
                _echo -n "Saving session $SESSION... "
                update_current_session $( session_save $SESSION )
                _echo "saved"
                ;;
            restore)
                _echo -n "Restoring session $SESSION... "
                update_current_session $( session_restore $SESSION )
                _echo "restored"
                ;;
            delete)
                _echo -n "Deleting session $SESSION... "
                update_current_session $( session_delete $SESSION $CURRENT_SESSION )
                _echo "deleted"
                ;;
            kill)
                _echo "Signalling all uzbl instances to terminate... "
                session_kill
                update_current_session
                _echo "all instances terminated"
                ;;
            exit)
                break
                ;;
           *)  _error "Invalid command $cmd" ;;
        esac
    done < $READ_FIFO
    _echo "Current session: $CURRENT_SESSION"
    [[ $ACTION = exit ]] && break
done
# Call exit handler
on_exit
